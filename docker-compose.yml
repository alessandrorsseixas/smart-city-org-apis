version: "3.8"
services:
  device-management:
    build:
      context: .
      dockerfile: src/smartcity.org.apis.device.management/Dockerfile
    image: smartcity/device-management:local
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=mysql:3306;Database=smartcitydb;User Id=device_user;Password=${MYSQL_DEVICE_PASSWORD:-devicepass}
      - Redis__Configuration=redis:6379
      - MQTT__Broker=tcp://mqtt:1883
      - RabbitMQ__Host=rabbitmq
      - Keycloak__Authority=http://keycloak:8080
      - Mongo__Connection=mongodb://mongo:27017/smartcitydb
      - Influx__Url=http://influxdb:8086
      - Kong__AdminUrl=http://kong:8001
    ports:
      - "5001:80"
    depends_on:
      - mysql
      - redis
      - mqtt
      - rabbitmq
      - keycloak
      - mongo
      - influxdb
      - kong

  energy-monitor:
    build:
      context: .
      dockerfile: src/smartcity.org.apis.energy.monitor/Dockerfile
    image: smartcity/energy-monitor:local
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=mysql:3306;Database=smartcitydb;User Id=energy_user;Password=${MYSQL_ENERGY_PASSWORD:-energypass}
      - Redis__Configuration=redis:6379
      - MQTT__Broker=tcp://mqtt:1883
      - RabbitMQ__Host=rabbitmq
      - Keycloak__Authority=http://keycloak:8080
      - Mongo__Connection=mongodb://mongo:27017/smartcitydb
      - Influx__Url=http://influxdb:8086
      - Kong__AdminUrl=http://kong:8001
    ports:
      - "5002:80"
    depends_on:
      - mysql
      - redis
      - mqtt
      - rabbitmq
      - keycloak
      - mongo
      - influxdb
      - kong

  dashboard-api:
    build:
      context: .
      dockerfile: src/smartcity.org.apis.dashboard.api/Dockerfile
    image: smartcity/dashboard-api:local
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=mysql:3306;Database=smartcitydb;User Id=dashboard_user;Password=${MYSQL_DASH_PASSWORD:-dashboardpass}
      - Redis__Configuration=redis:6379
      - MQTT__Broker=tcp://mqtt:1883
      - RabbitMQ__Host=rabbitmq
      - Keycloak__Authority=http://keycloak:8080
      - Mongo__Connection=mongodb://mongo:27017/smartcitydb
      - Influx__Url=http://influxdb:8086
      - Kong__AdminUrl=http://kong:8001
    ports:
      - "5003:80"
    depends_on:
      - mysql
      - redis
      - mqtt
      - rabbitmq
      - keycloak
      - mongo
      - influxdb
      - kong

  # Supporting services
  redis:
    image: redis:7
    ports:
      - "6379:6379"

  mqtt:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"
      - "9001:9001"

  rabbitmq:
    image: rabbitmq:3.11-management
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_user
      RABBITMQ_DEFAULT_PASS: rabbit_pass
    ports:
      - "5672:5672"
      - "15672:15672"

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: kcadmin
      KEYCLOAK_ADMIN_PASSWORD: kcadminpass
    ports:
      - "8080:8080"

  mongo:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_root
      MONGO_INITDB_ROOT_PASSWORD: mongo_root_pass
    ports:
      - "27017:27017"

  influxdb:
    image: influxdb:2.7
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: influx_admin
      DOCKER_INFLUXDB_INIT_PASSWORD: influx_pass
      DOCKER_INFLUXDB_INIT_ORG: smartcity
      DOCKER_INFLUXDB_INIT_BUCKET: smartcity_bucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: influx_token
    ports:
      - "8086:8086"

  kong:
    image: kong:3.0
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"

  # Kong management UI (open-source) - Konga
  konga:
    image: pantsel/konga:latest
    environment:
      - NODE_ENV=production
      # Token secret for Konga session encryption (override via env in production)
      - TOKEN_SECRET=${KONGA_TOKEN_SECRET:-konga_secret}
    ports:
      - "1337:1337"
    depends_on:
      - kong
    volumes:
      - konga-data:/app/konga.db

  n8n:
    image: n8nio/n8n:latest
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - GENERIC_TIMEZONE=UTC
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-n8npass}
      # Optional: use Redis if you want to offload queues
      - N8N_REDIS_HOST=redis
      - N8N_REDIS_PORT=6379
    ports:
      - "5678:5678"
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      - redis

  mysql:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: smartcitydb
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppass
    ports:
      - "3306:3306"

  # Istio and Kiali are typically installed into Kubernetes clusters and are not trivial to run in docker-compose.
  # Provide placeholders and instructions instead of attempting a full install here.
  istio-placeholder:
    image: alpine:latest
    command: ["/bin/sh", "-c", "sleep 3600"]

  kiali-placeholder:
    image: alpine:latest
    command: ["/bin/sh", "-c", "sleep 3600"]

networks:
  default:
    name: smartcity-network

volumes:
  # Example: persistent storage for mongo and influxdb if needed
  mongo-data: {}
  influxdb-data: {}
  n8n-data: {}
  konga-data: {}
